package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"
	"time"

	sqlc "github.com/Thanhbinh1905/seta-training-system/internal/db/sqlc"

	"github.com/Thanhbinh1905/seta-training-system/internal/graph/model"
	"github.com/Thanhbinh1905/seta-training-system/pkg/logger"
	"go.uber.org/zap"
	"golang.org/x/crypto/bcrypt"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, username string, email string, password string, role model.Role) (*model.User, error) {
	hashed, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
	if err != nil {
		logger.Log.Error("failed to hash password", zap.Error(err))
		return nil, err
	}

	dbUser, err := r.Queries.CreateUser(ctx, sqlc.CreateUserParams{
		Username:     username,
		Email:        email,
		Role:         string(role),
		PasswordHash: string(hashed),
	})
	if err != nil {
		logger.Log.Error("failed to create user", zap.Error(err), zap.String("username", username), zap.String("email", email), zap.String("role", string(role)))
		return nil, err
	}

	return &model.User{
		UserID:    dbUser.UserID.String(),
		Username:  dbUser.Username,
		Email:     dbUser.Email,
		Role:      model.Role(dbUser.Role),
		CreatedAt: dbUser.CreatedAt.Time.Format(time.RFC3339),
	}, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (*model.AuthPayload, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (bool, error) {
	panic(fmt.Errorf("not implemented: Logout - logout"))
}

// FetchUsers is the resolver for the fetchUsers field.
func (r *queryResolver) FetchUsers(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: FetchUsers - fetchUsers"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
