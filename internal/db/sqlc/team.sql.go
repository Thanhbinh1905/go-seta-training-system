// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: team.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addTeamManager = `-- name: AddTeamManager :exec
INSERT INTO team_managers (
  team_id,
  user_id
)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
`

type AddTeamManagerParams struct {
	TeamID int32       `json:"team_id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) AddTeamManager(ctx context.Context, arg AddTeamManagerParams) error {
	_, err := q.db.Exec(ctx, addTeamManager, arg.TeamID, arg.UserID)
	return err
}

const addTeamMember = `-- name: AddTeamMember :exec
INSERT INTO team_members (
  team_id,
  user_id
)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
`

type AddTeamMemberParams struct {
	TeamID int32       `json:"team_id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) AddTeamMember(ctx context.Context, arg AddTeamMemberParams) error {
	_, err := q.db.Exec(ctx, addTeamMember, arg.TeamID, arg.UserID)
	return err
}

const createTeam = `-- name: CreateTeam :one
INSERT INTO teams (
  team_name
)
VALUES ($1)
RETURNING team_id, team_name, created_at
`

func (q *Queries) CreateTeam(ctx context.Context, teamName string) (Team, error) {
	row := q.db.QueryRow(ctx, createTeam, teamName)
	var i Team
	err := row.Scan(&i.TeamID, &i.TeamName, &i.CreatedAt)
	return i, err
}

const getTeamManagers = `-- name: GetTeamManagers :many
SELECT u.user_id, u.username, u.email, u.role
FROM team_managers tm
JOIN users u ON u.user_id = tm.user_id
WHERE tm.team_id = $1
`

type GetTeamManagersRow struct {
	UserID   pgtype.UUID `json:"user_id"`
	Username string      `json:"username"`
	Email    string      `json:"email"`
	Role     string      `json:"role"`
}

func (q *Queries) GetTeamManagers(ctx context.Context, teamID int32) ([]GetTeamManagersRow, error) {
	rows, err := q.db.Query(ctx, getTeamManagers, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTeamManagersRow
	for rows.Next() {
		var i GetTeamManagersRow
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Email,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamMembers = `-- name: GetTeamMembers :many
SELECT u.user_id, u.username, u.email, u.role
FROM team_members tm
JOIN users u ON u.user_id = tm.user_id
WHERE tm.team_id = $1
`

type GetTeamMembersRow struct {
	UserID   pgtype.UUID `json:"user_id"`
	Username string      `json:"username"`
	Email    string      `json:"email"`
	Role     string      `json:"role"`
}

func (q *Queries) GetTeamMembers(ctx context.Context, teamID int32) ([]GetTeamMembersRow, error) {
	rows, err := q.db.Query(ctx, getTeamMembers, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTeamMembersRow
	for rows.Next() {
		var i GetTeamMembersRow
		if err := rows.Scan(
			&i.UserID,
			&i.Username,
			&i.Email,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeTeamManager = `-- name: RemoveTeamManager :exec
DELETE FROM team_managers
WHERE team_id = $1 AND user_id = $2
`

type RemoveTeamManagerParams struct {
	TeamID int32       `json:"team_id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) RemoveTeamManager(ctx context.Context, arg RemoveTeamManagerParams) error {
	_, err := q.db.Exec(ctx, removeTeamManager, arg.TeamID, arg.UserID)
	return err
}

const removeTeamMember = `-- name: RemoveTeamMember :exec
DELETE FROM team_members
WHERE team_id = $1 AND user_id = $2
`

type RemoveTeamMemberParams struct {
	TeamID int32       `json:"team_id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) RemoveTeamMember(ctx context.Context, arg RemoveTeamMemberParams) error {
	_, err := q.db.Exec(ctx, removeTeamMember, arg.TeamID, arg.UserID)
	return err
}
