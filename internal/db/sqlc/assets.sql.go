// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: assets.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFolder = `-- name: CreateFolder :one

INSERT INTO folders (
  name, owner_id
)
VALUES ($1, $2)
RETURNING folder_id, name, owner_id, created_at
`

type CreateFolderParams struct {
	Name    string      `json:"name"`
	OwnerID pgtype.UUID `json:"owner_id"`
}

// Folder Management
func (q *Queries) CreateFolder(ctx context.Context, arg CreateFolderParams) (Folder, error) {
	row := q.db.QueryRow(ctx, createFolder, arg.Name, arg.OwnerID)
	var i Folder
	err := row.Scan(
		&i.FolderID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
	)
	return i, err
}

const createNote = `-- name: CreateNote :one

INSERT INTO notes (
  title, body, folder_id, owner_id
)
VALUES ($1, $2, $3, $4)
RETURNING note_id, title, body, folder_id, owner_id, created_at
`

type CreateNoteParams struct {
	Title    string      `json:"title"`
	Body     pgtype.Text `json:"body"`
	FolderID pgtype.UUID `json:"folder_id"`
	OwnerID  pgtype.UUID `json:"owner_id"`
}

// Note Management
func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (Note, error) {
	row := q.db.QueryRow(ctx, createNote,
		arg.Title,
		arg.Body,
		arg.FolderID,
		arg.OwnerID,
	)
	var i Note
	err := row.Scan(
		&i.NoteID,
		&i.Title,
		&i.Body,
		&i.FolderID,
		&i.OwnerID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFolder = `-- name: DeleteFolder :exec
DELETE FROM folders
WHERE folder_id = $1
`

func (q *Queries) DeleteFolder(ctx context.Context, folderID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteFolder, folderID)
	return err
}

const deleteNote = `-- name: DeleteNote :exec
DELETE FROM notes WHERE note_id = $1
`

func (q *Queries) DeleteNote(ctx context.Context, noteID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteNote, noteID)
	return err
}

const deleteNotesByFolderID = `-- name: DeleteNotesByFolderID :exec
DELETE FROM notes
WHERE folder_id = $1
`

func (q *Queries) DeleteNotesByFolderID(ctx context.Context, folderID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteNotesByFolderID, folderID)
	return err
}

const getFolder = `-- name: GetFolder :one
SELECT folder_id, name, owner_id, created_at FROM folders WHERE folder_id = $1
`

func (q *Queries) GetFolder(ctx context.Context, folderID pgtype.UUID) (Folder, error) {
	row := q.db.QueryRow(ctx, getFolder, folderID)
	var i Folder
	err := row.Scan(
		&i.FolderID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
	)
	return i, err
}

const getNote = `-- name: GetNote :one
SELECT note_id, title, body, folder_id, owner_id, created_at FROM notes WHERE note_id = $1
`

func (q *Queries) GetNote(ctx context.Context, noteID pgtype.UUID) (Note, error) {
	row := q.db.QueryRow(ctx, getNote, noteID)
	var i Note
	err := row.Scan(
		&i.NoteID,
		&i.Title,
		&i.Body,
		&i.FolderID,
		&i.OwnerID,
		&i.CreatedAt,
	)
	return i, err
}

const revokeFolderShare = `-- name: RevokeFolderShare :exec
DELETE FROM folder_shares
WHERE folder_id = $1 AND user_id = $2
`

type RevokeFolderShareParams struct {
	FolderID pgtype.UUID `json:"folder_id"`
	UserID   pgtype.UUID `json:"user_id"`
}

func (q *Queries) RevokeFolderShare(ctx context.Context, arg RevokeFolderShareParams) error {
	_, err := q.db.Exec(ctx, revokeFolderShare, arg.FolderID, arg.UserID)
	return err
}

const revokeNoteShare = `-- name: RevokeNoteShare :exec
DELETE FROM note_shares
WHERE note_id = $1 AND user_id = $2
`

type RevokeNoteShareParams struct {
	NoteID pgtype.UUID `json:"note_id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) RevokeNoteShare(ctx context.Context, arg RevokeNoteShareParams) error {
	_, err := q.db.Exec(ctx, revokeNoteShare, arg.NoteID, arg.UserID)
	return err
}

const shareFolder = `-- name: ShareFolder :exec

INSERT INTO folder_shares (
  folder_id, user_id, access
)
VALUES ($1, $2, $3)
ON CONFLICT (folder_id, user_id) DO UPDATE
SET access = EXCLUDED.access
`

type ShareFolderParams struct {
	FolderID pgtype.UUID `json:"folder_id"`
	UserID   pgtype.UUID `json:"user_id"`
	Access   string      `json:"access"`
}

// Sharing API
func (q *Queries) ShareFolder(ctx context.Context, arg ShareFolderParams) error {
	_, err := q.db.Exec(ctx, shareFolder, arg.FolderID, arg.UserID, arg.Access)
	return err
}

const shareNote = `-- name: ShareNote :exec
INSERT INTO note_shares (
  note_id, user_id, access
)
VALUES ($1, $2, $3)
ON CONFLICT (note_id, user_id) DO UPDATE
SET access = EXCLUDED.access
`

type ShareNoteParams struct {
	NoteID pgtype.UUID `json:"note_id"`
	UserID pgtype.UUID `json:"user_id"`
	Access string      `json:"access"`
}

func (q *Queries) ShareNote(ctx context.Context, arg ShareNoteParams) error {
	_, err := q.db.Exec(ctx, shareNote, arg.NoteID, arg.UserID, arg.Access)
	return err
}

const updateFolder = `-- name: UpdateFolder :exec
UPDATE folders
SET name = $2
WHERE folder_id = $1
`

type UpdateFolderParams struct {
	FolderID pgtype.UUID `json:"folder_id"`
	Name     string      `json:"name"`
}

func (q *Queries) UpdateFolder(ctx context.Context, arg UpdateFolderParams) error {
	_, err := q.db.Exec(ctx, updateFolder, arg.FolderID, arg.Name)
	return err
}

const updateNote = `-- name: UpdateNote :exec
UPDATE notes
SET title = $2, body = $3
WHERE note_id = $1
`

type UpdateNoteParams struct {
	NoteID pgtype.UUID `json:"note_id"`
	Title  string      `json:"title"`
	Body   pgtype.Text `json:"body"`
}

func (q *Queries) UpdateNote(ctx context.Context, arg UpdateNoteParams) error {
	_, err := q.db.Exec(ctx, updateNote, arg.NoteID, arg.Title, arg.Body)
	return err
}
